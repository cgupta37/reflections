When would you want to use a remote repository rather than keeping all your work local?
  I would prefer a remote repository when I need to access my project when I don't have my computer with me, or when I need to share my project with someone else.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	If Git automatically stays up-to-date with the remote repository, every commit will be pulled. This will result in many unnecessary pulls. However, if I manually pull the changes, I can do so when sufficient number of commits have been made to a branch.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Branching is done within a repository for reasons such as adding a new feature, or experimenting. Clone is used to create a copy of the repository on your computer in a different location, or from the Github servers to your computer. Fork is a tool that is used to clone a repository in your account on the Github servers, without cloning it to you computer. The appropriate tool can be chosen based on the above different situations of use.

What is the benefit of having a copy of the last known state of the remote stored locally?
	Locally storing the last known state of the remote helps to track the commit upto which push or pull has been done, ie upto which commit the Github repository has interacted with the local repository.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	Without using Git or GitHub, the only way to collaborate could be repeatedly mailing the updated versions of the project, which could be very tedious. Using GitHub is easier and more convenient.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	Changes should be made in a sepaate branch when some new fix is implemented as an experiment, or requires feedback from other collaborators. However, making changes directly in the master branch is easier because there is no need to pull the master into the local repository, merge it with your branch and then push it to the GitHub master.